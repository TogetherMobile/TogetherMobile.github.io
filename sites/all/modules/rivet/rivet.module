<?php 

/**
 * Implements hook_init.
*/
function rivet_init() { 
	drupal_add_js(array('isFront' => drupal_is_front_page()), 'setting'); 
}


/**
 * Implements hook_menu.
*/
function rivet_menu() {	
	return array(	
		"stream/author/%" => array(
			'title' => 'Stream',
			'page callback' => 'rivet_page_stream_by_author',
			'page arguments' => array(2),
			'access arguments' => array('access content'),
			'type' => MENU_CALLBACK,
		),
	);
}

function rivet_page_stream_by_author($username = NULL) {
	$account = user_load_by_name($username);
	
	if ( $account ) {
		                   
        $formatted_name = rivet_get_formatted_name($account);

		$title = drupal_get_title() . ": " . $formatted_name;
		drupal_set_title( $title );
	}

	return views_embed_view('stream', 'page', $account ? $account->uid : NULL );
}


function rivet_form_alter(&$form, &$form_state, $form_id) {
  	// Sexy submit buttons
  	if ( isset($form['actions']['submit']['#attributes']) ) {
		if ( $key = array_search ('radius', $form['actions']['submit']['#attributes']['class'] ) ) {
			unset( $form['actions']['submit']['#attributes']['class'][$key] );
	  	}
  	}
}

function rivet_form_webform_client_form_103_alter(&$form, &$form_state) {
	$classes = $form['actions']['submit']['#attributes']['class'];
	foreach( $classes as $key => &$c ) {
		if ( $c == "secondary" ) { unset($form['actions']['submit']['#attributes']['class'][$key]); }
	}
}

function rivet_form_blog_post_node_form_alter(&$form, &$form_state) {
	
	if ( $form['field_contains_video']['und']['#default_value'] == 1 ) {
		$form['field_contains_video']['#attributes']['class'][] = "active";
	}

	drupal_add_css('#edit-field-contains-video.active ~ #edit-field-graphic {display:none;} #edit-field-contains-video:not(.active) ~ #node_blog_post_form_group_video {display:none;}', 'inline');
	
	$js = 'jQuery(document).ready(function () { jQuery("#edit-field-contains-video-und").change(function() { jQuery("#edit-field-contains-video").toggleClass("active"); }) });';
	drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));
}

function rivet_form_views_exposed_form_alter(&$form, &$form_state) {
	if ( $form["#id"] == "views-exposed-form-articles-infographics-page-1" ) {
		$form["field_category_tid"]["#options"]["All"] = "All";
	}
}

function rivet_form_webform_client_form_39_alter(&$form, &$form_state) {
	$form["#prefix"] = '<div id="contact-form-close" class="webform-close">Close</div>';
}

function rivet_form_webform_client_form_40_alter(&$form, &$form_state) {
	$form['#submit'][] = 'rivet_gated_form_callback';
}
	
function rivet_gated_form_callback(&$form, &$form_state) {
	//setcookie( "accessarticles", "true", time() + 31536000, "/" ); // one year
	drupal_get_messages('status');
	if ( isset($form['#node']->webform['confirmation']) ) {
		drupal_set_message($form['#node']->webform['confirmation']);	
	} else {
		drupal_set_message('Thank you');
	}
}

/**
 * Implements hook_block_info.
*/
function rivet_block_info() {
	$blocks = array();
	
	$blocks['contributors'] = array( 
		'info' => t('Contributors'), 
		'cache' => DRUPAL_CACHE_GLOBAL,
		
	);
		
	return $blocks;
}
/**
 * Implements hook_block_view.
*/
function rivet_block_view($delta = '') {
	if ( $delta == 'contributors' ) {
		$block['subject'] = 'Contributors';
		$block['content'] = array(
			"#markup" => rivet_get_authors(),
		);
	}
	
	return $block;
}







// private functions 

function rivet_is_page_single($node = NULL) {
	
	$contents = array();
	
	if ( $node ) {

		$section = '';
		
	
		$result = db_select('field_data_field_content', 'section')
			->condition('section.field_content_nid', $node->nid)
			->fields('section', array('entity_id'))
			->execute();
			
		foreach ($result as $record) {
			$section = $record->entity_id;
		}
				
		$result = db_select('field_data_field_content', 'section')
			->condition('section.entity_id', $section)
			->fields('section', array('field_content_nid'))
			->execute();
		
		foreach ($result as $record) {
			$contents[] = $record;
		}
	}
	
	return count( $contents ) == 1 ? TRUE : FALSE;
	
}

function rivet_get_main_menu( $format = FALSE ) {
	$menu = menu_tree_all_data('main-menu');
	$main_menu = array();
	foreach( $menu as $item ) {
		$item = $item['link'];
		$fragment = isset($item['options']['fragment']) ? $item['options']['fragment'] : '';
		if ( $item['link_path'] == '<front>' ) {
			if ( drupal_is_front_page() ) {
				$item['link_path'] = '';
			} else {
				global $base_url;
				$item['link_path'] = $base_url;				
			}
		} 

		$main_menu[] = array(
			"menuanchor" => $fragment,
			"path" => $item['link_path'] . ( $fragment ? "/#" . $fragment : '' ),
			"title" => $item['title'],
		);		
	}
	
	if ( $format ) {
		$menu = $main_menu;
		$main_menu = '';
		foreach( $menu as $item ) {
			$main_menu .= '<li data-menuanchor="' . $item['menuanchor'] . '"><a href="' . $item['path'] . '">' . $item['title'] . '</a></li>';
		}
	}
	
	return $main_menu;
	
}

function rivet_sort_by_weight($a, $b) {
	$anode = $a['node'];
	$bnode = $b['node'];
	
	if ($anode->weight_weight == $bnode->weight_weight) { return 0; }
    return ($anode->weight_weight < $bnode->weight_weight) ? -1 : 1;
}

function rivet_get_prev($node) {
	return rivet_get_adjacent_node($node, "prev");
}

function rivet_get_next($node) {
	return rivet_get_adjacent_node($node);
}

function rivet_get_adjacent_node($node, $dir = "next") {
	$type = $node->type;
	$time = $node->created;

	$query = db_select('node', 'n');
	$result = $query->condition('n.created', $time, ( $dir == "prev" ? '<' : '>' ) )
	 				->condition('n.type', $type)
	 				->condition('n.status', 1)
	 				->fields('n', array('nid'))
	 				->orderBy('n.created', ( $dir == "prev" ? 'DESC' : 'ASC' ))
	 				->range(0, 1)
	 				->execute()->fetchField();

	return $result ? node_load( $result ) : NULL;	
}

function rivet_build_filter($vname) {
	$vocab = taxonomy_vocabulary_machine_name_load($vname);
	$terms = taxonomy_get_tree($vocab->vid);
	$content = '<div class="grid-filters">' . 
			   '	<label for="edit-field-category-tid">Filter</label>' . 
			   '	<div class="filters">' . 
			   '		<div class="filters-wrap">' . 
			   '		<span class="filter" data-filter="all">All</span>';

	foreach($terms as &$term) {
		
		$content .= '<span class="filter" data-filter=".category-' . strtolower( str_replace(" ","-",$term->name) ) . '">' . $term->name . '</span>';
	}
	
	$content .= '		</div>' . 
				'	</div>' . 
			    '	<span class="toggle"></span>' . 
			    '</div>';
			    
	return $content;
}

function rivet_get_authors() {
	$items = array();
	$query = db_select('node', 'n')->condition('n.status', 1)->condition('n.type', 'blog_post')->groupBy('u.uid');
	$query->join('users', 'u', 'n.uid = u.uid');
	$query->join('field_data_field_first_name', 'fn', 'n.uid = fn.entity_id');
	$query->join('field_data_field_last_name', 'ln', 'n.uid = ln.entity_id');
	$query->addField('u', 'name');
	$query->addField('fn', 'field_first_name_value', 'first_name');
	$query->addField('ln', 'field_last_name_value', 'last_name');
	$result = $query->execute();

	foreach ($result as $record) {
		$formatted_name = ( $record->first_name && $record->last_name ) ? $record->first_name . " " . $record->last_name : $record->name;
		$items[] = '<li>' . l($formatted_name, 'stream/author/' . $record->name) . '</li>'; 
	}

	return '<ul>' . implode('', $items) . '</ul>';
}

function rivet_get_formatted_name($account = NULL) {
	
	$type = gettype( $account );

	switch ($type) {
	    case "integer":
	        $account = user_load( $account );
	        break;
	    case "string":
	    	if ( is_numeric($account) ) {
		    	$account = user_load( $account );	
	    	} else {
		    	$account = user_load_by_name( $account );	
	    	}
	        break;
	    case "object":
	        $account = $account;
	        break;
	    default:
	    	global $user;
			$account = user_load( $user->uid );
	}

    return ( isset($account->field_first_name['und']) && isset($account->field_last_name['und']) ) ? 
    	$account->field_first_name['und'][0]['value'] . " " . $account->field_last_name['und'][0]['value'] : $account->name;    
}